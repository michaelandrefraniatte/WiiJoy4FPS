JoyLeft4MissionAmmunition.txt
//mouse control
public static int[] wd = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
                public static int[] wu = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
                public static bool[] _Valuechanged = new bool[2], _valuechanged = new bool[2];
                public void Main(double mWSNunchuckStateRawJoystickX, double mWSNunchuckStateRawJoystickY, double mWSNunchuckStateRawValuesX, double mWSNunchuckStateRawValuesY, double mWSNunchuckStateRawValuesZ, bool mWSNunchuckStateC, bool mWSNunchuckStateZ, 
                double mWSButtonStateIRX, double mWSButtonStateIRY, bool mWSButtonStateA, bool mWSButtonStateB, bool mWSButtonStateMinus, bool mWSButtonStateHome, bool mWSButtonStatePlus, bool mWSButtonStateOne, bool mWSButtonStateTwo, bool mWSButtonStateUp, bool mWSButtonStateDown, bool mWSButtonStateLeft, bool mWSButtonStateRight, double mWSRawValuesX, double mWSRawValuesY, double mWSRawValuesZ, 
                float EulerAnglesX, float EulerAnglesY, float EulerAnglesZ, float DirectAnglesX, float DirectAnglesY, float DirectAnglesZ, double camx, double camy, float EulerAnglesLeftX, float EulerAnglesLeftY, float EulerAnglesLeftZ, float DirectAnglesLeftX, float DirectAnglesLeftY, float DirectAnglesLeftZ, float EulerAnglesRightX, float EulerAnglesRightY, float EulerAnglesRightZ, 
                float DirectAnglesRightX, float DirectAnglesRightY, float DirectAnglesRightZ, bool LeftButtonSHOULDER_1, bool LeftButtonMINUS, bool LeftButtonCAPTURE, bool LeftButtonDPAD_UP, bool LeftButtonDPAD_LEFT, bool LeftButtonDPAD_DOWN, bool LeftButtonDPAD_RIGHT, bool LeftButtonSTICK, bool RightButtonDPAD_DOWN, bool LeftButtonSL, bool LeftButtonSR, double GetStickLeftX, double GetStickLeftY, 
                bool RightButtonPLUS, bool RightButtonDPAD_RIGHT, bool RightButtonHOME, bool RightButtonSHOULDER_1, bool RightButtonDPAD_LEFT, bool RightButtonDPAD_UP, bool RightButtonSTICK, bool RightButtonSL, bool RightButtonSR, bool RightButtonSHOULDER_2, bool LeftButtonSHOULDER_2, double GetStickRightX, double GetStickRightY, float GetAccelX, float GetAccelY, float GetAccelZ, float GetAccelRightX, float GetAccelRightY, float GetAccelRightZ, float GetAccelLeftX, float GetAccelLeftY, float GetAccelLeftZ, 
                int MouseHookX, int MouseHookY, int MouseHookWheel, bool MouseHookLeftButton, bool MouseHookRightButton, bool MouseHookDoubleClick, bool MouseHookMiddleButton, double watchM)
                { 
		            System.Threading.Thread.Sleep(1);
		}

//keyboard control
public static int[] wd = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
                public static int[] wu = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
                public static bool[] _Valuechanged = new bool[36], _valuechanged = new bool[36];
                public void Main(double mWSNunchuckStateRawJoystickX, double mWSNunchuckStateRawJoystickY, double mWSNunchuckStateRawValuesX, double mWSNunchuckStateRawValuesY, double mWSNunchuckStateRawValuesZ, bool mWSNunchuckStateC, bool mWSNunchuckStateZ, 
                double mWSButtonStateIRX, double mWSButtonStateIRY, bool mWSButtonStateA, bool mWSButtonStateB, bool mWSButtonStateMinus, bool mWSButtonStateHome, bool mWSButtonStatePlus, bool mWSButtonStateOne, bool mWSButtonStateTwo, bool mWSButtonStateUp, bool mWSButtonStateDown, bool mWSButtonStateLeft, bool mWSButtonStateRight, double mWSRawValuesX, double mWSRawValuesY, double mWSRawValuesZ, 
                float EulerAnglesX, float EulerAnglesY, float EulerAnglesZ, float DirectAnglesX, float DirectAnglesY, float DirectAnglesZ, double camx, double camy, float EulerAnglesLeftX, float EulerAnglesLeftY, float EulerAnglesLeftZ, float DirectAnglesLeftX, float DirectAnglesLeftY, float DirectAnglesLeftZ, float EulerAnglesRightX, float EulerAnglesRightY, float EulerAnglesRightZ, 
                float DirectAnglesRightX, float DirectAnglesRightY, float DirectAnglesRightZ, bool LeftButtonSHOULDER_1, bool LeftButtonMINUS, bool LeftButtonCAPTURE, bool LeftButtonDPAD_UP, bool LeftButtonDPAD_LEFT, bool LeftButtonDPAD_DOWN, bool LeftButtonDPAD_RIGHT, bool LeftButtonSTICK, bool RightButtonDPAD_DOWN, bool LeftButtonSL, bool LeftButtonSR, double GetStickLeftX, double GetStickLeftY, 
                bool RightButtonPLUS, bool RightButtonDPAD_RIGHT, bool RightButtonHOME, bool RightButtonSHOULDER_1, bool RightButtonDPAD_LEFT, bool RightButtonDPAD_UP, bool RightButtonSTICK, bool RightButtonSL, bool RightButtonSR, bool RightButtonSHOULDER_2, bool LeftButtonSHOULDER_2, double GetStickRightX, double GetStickRightY, float GetAccelX, float GetAccelY, float GetAccelZ, float GetAccelRightX, float GetAccelRightY, float GetAccelRightZ, float GetAccelLeftX, float GetAccelLeftY, float GetAccelLeftZ, 
                int MouseHookX, int MouseHookY, int MouseHookWheel, bool MouseHookLeftButton, bool MouseHookRightButton, bool MouseHookDoubleClick, bool MouseHookMiddleButton, double watchM)
                { 
                    this[3] = LeftButtonSR;
                    if (_Valuechanged[3] & this[3])
                        SimulateKeyDown(VK_X, S_X);
                    if (_Valuechanged[3] & !this[3])
                        SimulateKeyUp(VK_X, S_X);
                    this[2] = LeftButtonSL;
                    if (_Valuechanged[2] & this[2])
                        SimulateKeyDown(VK_C, S_C);
                    if (_Valuechanged[2] & !this[2])
                        SimulateKeyUp(VK_C, S_C);
                    this[6] = LeftButtonSHOULDER_2;
                    if (_Valuechanged[6] & this[6])
                        SimulateKeyDown(VK_G, S_G);
                    if (_Valuechanged[6] & !this[6])
                        SimulateKeyUp(VK_G, S_G);
                    this[11] = LeftButtonDPAD_DOWN;
                    if (_Valuechanged[11] & this[11])
                        SimulateKeyDownArrows(VK_Return, S_Return);
                    if (_Valuechanged[11] & !this[11])
                        SimulateKeyUpArrows(VK_Return, S_Return);
                    this[22] = LeftButtonDPAD_UP;
                    if (_Valuechanged[22] & this[22])
                        SimulateKeyDownArrows(VK_Escape, S_Escape);
                    if (_Valuechanged[22] & !this[22])
                        SimulateKeyUpArrows(VK_Escape, S_Escape);
                    this[12] = LeftButtonDPAD_LEFT;
                    if (_Valuechanged[12] & this[12])
                        SimulateKeyDownArrows(VK_DOWN, S_DOWN);
                    if (_Valuechanged[12] & !this[12])
                        SimulateKeyUpArrows(VK_DOWN, S_DOWN);
                    this[13] = LeftButtonDPAD_RIGHT;
                    if (_Valuechanged[13] & this[13])
                        SimulateKeyDownArrows(VK_UP, S_UP);
                    if (_Valuechanged[13] & !this[13])
                        SimulateKeyUpArrows(VK_UP, S_UP);
                    this[7] = LeftButtonSTICK;
                    if (_Valuechanged[7] & this[7])
                        SimulateKeyDown(VK_Tab, S_Tab);
                    if (_Valuechanged[7] & !this[7])
                        SimulateKeyUp(VK_Tab, S_Tab);
                    this[23] = LeftButtonSHOULDER_1;
                    if (_Valuechanged[23] & this[23])
                        SimulateKeyDown(VK_T, S_T);
                    if (_Valuechanged[23] & !this[23])
                        SimulateKeyUp(VK_T, S_T);
                    this[8] = LeftButtonMINUS;
                    if (_Valuechanged[8] & this[8])
                        SimulateKeyDown(VK_Escape, S_Escape);
                    if (_Valuechanged[8] & !this[8])
                        SimulateKeyUp(VK_Escape, S_Escape);
                    this[16] = GetStickLeftX > 0.33f;
                    this[17] = GetStickLeftX < -0.33f;
                    this[18] = GetStickLeftY > 0.33f;
                    this[19] = GetStickLeftY < -0.33f;
                    if (_Valuechanged[16] & this[16])
                        SimulateKeyDownArrows(VK_UP, S_UP);
                    if (_Valuechanged[16] & !this[16])
                        SimulateKeyUpArrows(VK_UP, S_UP);
                    if (_Valuechanged[17] & this[17])
                        SimulateKeyDownArrows(VK_DOWN, S_DOWN);
                    if (_Valuechanged[17] & !this[17])
                        SimulateKeyUpArrows(VK_DOWN, S_DOWN);
                    if (_Valuechanged[18] & this[18])
                        SimulateKeyDownArrows(VK_LEFT, S_LEFT);
                    if (_Valuechanged[18] & !this[18])
                        SimulateKeyUpArrows(VK_LEFT, S_LEFT);
                    if (_Valuechanged[19] & this[19])
                        SimulateKeyDownArrows(VK_RIGHT, S_RIGHT);
                    if (_Valuechanged[19] & !this[19])
                        SimulateKeyUpArrows(VK_RIGHT, S_RIGHT);
                    this[24] = LeftButtonCAPTURE;
                    if (_Valuechanged[24] & this[24])
                        SimulateKeyDown(VK_Z, S_Z);
                    if (_Valuechanged[24] & !this[24])
                        SimulateKeyUp(VK_Z, S_Z);
		            System.Threading.Thread.Sleep(1);
                }

